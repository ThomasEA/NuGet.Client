<Project ToolsVersion="15.0">
  <!-- Compiler flags -->
  <PropertyGroup Condition=" '$(TargetFramework)' == 'net45' OR '$(TargetFramework)' == 'net46' ">
    <DefineConstants>$(DefineConstants);IS_DESKTOP</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(TargetFramework)' == 'netcoreapp1.0' OR '$(TargetFramework)' == 'netcoreapp1.1' OR'$(TargetFramework)' == 'netstandard1.0' OR '$(TargetFramework)' == 'netstandard1.3' OR '$(TargetFramework)' == 'netstandard1.4' OR '$(TargetFramework)' == 'netstandard1.5' OR '$(TargetFramework)' == 'netstandard1.6' ">
    <DefineConstants>$(DefineConstants);IS_CORECLR</DefineConstants>
  </PropertyGroup>

  <!-- Include shared files for netcore projects -->
  <ItemGroup Condition=" '$(IsNetCoreProject)' == 'true' AND '$(SkipShared)' != 'true' AND '$(TestProject)' != 'true' ">
    <Compile Include="$(SharedDirectory)\*.cs" Exclude="bin\**;obj\**;**\*.xproj;packages\**" />
  </ItemGroup>

  <!-- Projects that ship -->
  <ImportGroup>
    <Import Project="sign.targets" />
  </ImportGroup>

  <!-- These are needed because currently a VSIX project cannot reference a net core project that multi targets -->
  <Target Name="BuiltProjectOutputGroupDependencies" Condition=" '$(IsNetCoreProject)' == 'true' " />
  <Target Name="BuiltProjectOutputGroup" Condition=" '$(IsNetCoreProject)' == 'true' " />
  <Target Name="GetCopyToOutputDirectoryItems" Condition=" '$(IsNetCoreProject)' == 'true' " />
  <Target Name="SatelliteDllsProjectOutputGroup" Condition=" '$(IsNetCoreProject)' == 'true' " />
  <Target Name="DebugSymbolsProjectOutputGroup" Condition=" '$(IsNetCoreProject)' == 'true' " />

  <!-- Test Projects -->
  <ImportGroup Condition=" '$(TestProject)' == 'true' ">
    <Import Project="test.targets" />
  </ImportGroup>

  <!--
    ============================================================
    TestProject
    Runs tests on the current project if it is a test project.
    ============================================================
  -->
  <Target Name="TestProject" Condition=" '$(TestProject)' == 'true' " DependsOnTargets="VSTest">
    <Message Text="Tested project $(MSBuildProjectName)" Importance="high"  />
  </Target>

  <!--
    ============================================================
    PackProject hook
    Packs the current project if it is marked as a pack project.
    ============================================================
  -->
  <!-- Create nupkg hook -->
  <PropertyGroup Condition=" '$(PackProject)' == 'true' AND '$(PackProjects)' == 'true' AND '$(VisualStudioVersion)' == '15.0' ">
    <IsInnerBuildForPack Condition=" '$(TargetFrameworks)' != '' AND '$(TargetFramework)' != '' ">true</IsInnerBuildForPack>
    <EnablePackTarget Condition=" '$(IsInnerBuildForPack)' != 'true' ">true</EnablePackTarget>
  </PropertyGroup>
  
  <PropertyGroup Condition=" '$(EnablePackTarget)' == 'true' AND '$(CustomPack)' != 'true' ">
    <IsPackable>true</IsPackable>
    <IncludeSymbols Condition=" '$(IncludeSymbols)' == '' ">true</IncludeSymbols>
    <PackageOutputPath>$(NupkgOutputDirectory)</PackageOutputPath>
    <NoPackageAnalysis>true</NoPackageAnalysis>
  </PropertyGroup>

  <Target Name="PackProject"
          AfterTargets="Build;Rebuild"
          DependsOnTargets="Pack"
          Condition=" '$(EnablePackTarget)' == 'true' AND '$(CustomPack)' != 'true' ">

    <Message Text="Created nupkg for $(ProjectName)" Importance="high" />
  </Target>
</Project>
